Week5 Tasks

1. Create a class named DivideTwoNumbers and write a program that can perform division of two numbers without using the division (/) and multiplication (*) operators.


		Example:
			n1 = 100
			n2 = 6

		Output:
			16 with a reminder of 4

2. Create a class named ConsecutiveNumbers and implement a function with the following specifications:
	Given a positive integer N, the function should print consecutive numbers from 1 to N, with each number on a separate line.

	However, there are special rules for certain numbers:
		If a number is divisible by 2, replace it with the word "Codility".
		If divisible by 3, replace it with "Test".
		If divisible by 5, replace it with "Coders".
		If a number is divisible by more than one of these numbers (2, 3, or 5),
		replace it with a combination of the respective words in the order Codility, Test, and Coders.

	For example:
		Numbers divisible by both 2 and 3 should be replaced by "CodilityTest".
		Numbers divisible by both 2 and 5 should be replaced by "CodilityCoders".
		Numbers divisible by both 3 and 5 should be replaced by "TestCoders".
		Numbers divisible by all three (2, 3, and 5) should be replaced by "CodilityTestCoders".


			Here's an example of the function call:
			 	consecutiveNums(17);

		 	Output:
					1
					Codility
					Test
					Codility
					Coders
					CodilityTest
					7
					Codility
					Test
					CodilityCoders
					11
					CodilityTest
					13
					Codility
					TestCoders
					Codility
					17

3a. CharacterSet part 1 [methods, loops]

	Create a method that will accept two chars and return a String.
	Based on the given chars, output a character sequence where the first char is the starting character and the second char is the ending character for the sequence

	Note: the character sequence will go in order, so the starting char should come before the ending char. Use the ascii table is a reference

    Ex:
        ('7', 'P') -> 789:;<=>?@ABCDEFGHIJKLMNOP
        ('X', '}') -> XYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}


3b. CharacterSet part 2 [methods, loops, overloading]

    Create a method (overloading the method from part 1) that has a String parameter and returns a String.
    Based on the given String a different set of characters will be returned
    use these to determine which set of characters is returned:

    uppercase -> ABCDEFGHIJKLMNOPQRSTUVWXYZ
    lowercase -> abcdefghijklmnopqrstuvwxyz
    digit -> 123456789
    special -> !"#$%&'()*+,-.

    so if the method is called with the argument "digit" then the method will return the String "123456789"
